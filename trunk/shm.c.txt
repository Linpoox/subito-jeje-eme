/*
 * shm.c
 *
 * Maniet Arthur
 * Renard J√©rome
 *
 * Gestion de la m√©moire partag√©e
 */

#include "shm.h"

int shmid;
int nb_lecteurs;

/* Shared memory pour les donn√©es de jeu */

void create_shm(key_t key) {
	if ((shmid = shmget(key, sizeof(game_data_t), IPC_CREAT | 0644)) < 0)
		error("Erreur √  la cr√©ation de la m√©moire partag√©e");
}

game_data_t* attach_to_shm(key_t key, int is_writer) {
	/* shmat retourne un pointeur ou -1 ; comme un pointeur est un long (je crois) on ne le cast comme tel qu'au return  */
	static long addresse_shm;
	
	if ((shmid = shmget(key, sizeof(game_data_t), 0)) < 0)
		error("Erreur √  l'obtention de la m√©moire partag√©e, elle n'a probablement pas √©t√© cr√©√©e");
	
	if ((addresse_shm = (long) shmat(shmid, 0, (is_writer ? 0 : SHM_RDONLY))) < 0)
		error("Erreur lors de l'attachement √  la m√©moire partag√©e");
	
	return (game_data_t *) addresse_shm;
}

void detach_from_shm(void* addresse_shm) {
	if (shmdt(addresse_shm) < 0)
		error("Erreur au d√©tachement de la m√©moire partag√©e");
}

void destroy_shm() {
	if (shmctl(shmid, IPC_RMID, NULL) < 0)
		error("Erreur √  la suppression de la m√©moire partag√©e");
}

/* Shared memory qui partage le nombre de lecteurs pour l'algorithme de Courtois */

void create_shm_nb_lecteurs(key_t key) {
	if ((nb_lecteurs = shmget(key, sizeof(int), IPC_CREAT | 0666)) < 0)
		error("Erreur √  la cr√©ation de la m√©moire partag√©e pour le nombre de lecteurs");
}

int* attach_to_shm_nb_lecteurs(key_t key) {
	static long addresse_shm;
	
	if ((nb_lecteurs = shmget(key, sizeof(int), 0)) < 0)
		error("Erreur √  l'obtention de la m√©moire partag√©e pour le nombre de lecteurs, elle n'a probablement pas √©t√© cr√©√©e");
	
	if ((addresse_shm = (long) shmat(nb_lecteurs, 0, 0)) < 0)
		error("Erreur lors de l'attachement √  la m√©moire partag√©e");
	
	return (int *) addresse_shm;
}

/* Le dernier processus vivant - pas forc√©ment le serveur - doit nettoyer cet ipc */
/* -> √  chaque shmdt() on tente de supprimer l'ipc */
void detach_from_shm_nb_lecteurs(void * shm) { /* TODO : test */
	if (shmctl(nb_lecteurs, IPC_RMID, NULL) < 0)
		error("Erreur √  la suppression de la m√©moire partag√©e");
	if (shmdt(shm) < 0)
		error("Erreur au d√©tachement de la m√©moire partag√©e");
}