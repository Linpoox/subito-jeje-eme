/*
 * util.c
 *
 * Maniet Arthur
 * Renard J√©rome
 */

#include "util.h"

/* Affiche un message d'erreur et quitte l'application */
void error(const char *msg) {
    perror(msg);
    exit(1);
}

/* Lit TAILLE_MESSAGES caract√®res depuis fd vers buffer puis positionne les pointeurs type_message et contenu_message */
void read_message(int fd, char* buffer, char** type_message, char** contenu_message) {
	bzero(buffer, TAILLE_MESSAGES);
	if (read(fd, buffer, TAILLE_MESSAGES) < 0)
		error("Erreur de lecture du message re√ßu");
	strtok(buffer, "\n");
	buffer[TAILLE_MESSAGES-1] = '\0';
	*type_message = strtok(buffer, " ");
	*contenu_message = strtok(NULL, "");
}

/* permute al√©atoirement les √©l√©ments d'un tableau de taille n */
void shuffle(int tab[], int n) {
    static int i, j, temp;
	
	srand ((int)time(NULL));
    for (i = n-1; i > 0; i--) {
        j = rand() % (i+1);
		temp = tab[i];
		tab[i] = tab[j];
		tab[j] = temp;
    }
}

/* Teste si un bloc m√©moire est null (tous les bytes √  0) */
int is_null(void * bloc, int size) {
	static char* testblock;
	
	testblock = malloc(size);
	memset(testblock, sizeof testblock, 0);
	return !memcmp(bloc, testblock, size);
}